1. 查看本地API网页时，使用Chrome浏览器，并且在浏览器的启动参数中增加:
	-allow-file-access-from-files
2. 如果编译时出现编码错误，则在config.json里面的"let"项下面重新指定TMPDIR:
	"TMPDIR"       : "c:/temp"
3. (无效)如果要看sdk中的示例，需要安装npm : https://nodejs.org/en/download/
4. JS高级算法 : http://www.webtoolkit.info

5. 注意 : (0=="")在JS中返回是true

6. 使用libraries时注意, 一定要包含所有文件
     "includes"  :
    {
      "include" :
      [
        "xlsys.*"
      ]
    }
    
7. 接收formdata数据默认使用multipart方式, 服务端的servlet类上必须加上注释      (经测试无效果)
@WebServlet
@MultipartConfig

8. 使用eval时，传入的str一定要在外面加上括号eval("(" + str + ")");

9. Appearance是所有主题部分的集合, 返回一个叫style的function, 里面是对应widget的所有properties, 参数states中的属性值都是widget通过addState和removeState来设置
而Decoration则是定义一个style属性, style中能设置的值都是qx.ui.decoration.Decorator中的properties

自定义主题风格最好的方法就是拷贝一个原有的，然后改写所有的参数, 这样不会漏掉state

10. 手机端开发需要安装ruby : http://rubyinstaller.org/downloads/
安装完后运行以下命令:
gem install sass

还要安装Cordova : http://cordova.apache.org/docs/en/latest/guide/cli/index.html
npm install -g cordova

每个平台都需要装各个平台的sdk, 上手向导 : http://cordova.apache.org/docs/en/latest/guide/cli/index.html

11. 手机端使用VBox布局时, 容器一定得有高度, 否则alignY属性没有用

12. svg图标库
http://glyph.smarticons.co/#usage



qooxdoo源码Bug:
1. qx.ui.mobile.layout.AbstractBox 193行
	widget.removeCssClass("qx-flex" + value);  ->  widget.removeCssClass("qx-flex" + old);
2. qx.ui.mobile.page.Page 最后的defer, 注释掉, 多此一举, 反而会造成使用者的困扰
	
qooxdoo使用特别注意:
1. 手机端的Drawer会阻止任何第一个子元素的指针事件

cordova源码Bug:
org.apache.cordova.camera.CameraLauncher 660行
	this.callbackContext.success(fileLocation);  ->  this.callbackContext.success(uri.toString());